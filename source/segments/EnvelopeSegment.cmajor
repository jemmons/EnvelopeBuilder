namespace EnvelopeBuilder 
{
    namespace Segments 
    {
        processor EnvelopeSegment(float initialTargetLevel = 1.f, float initialCurve = 0.f)
        {
            input stream float in;
            input event float seconds;
            input event float targetLevelIn;
            input event float curveIn;
            input event void latch;
            input event void free;
            output event void trigger;
            output stream float out;

            enum TrigState
            {
                Ready, Triggering, Triggered
            }
            TrigState trigState = TrigState::Ready;
            SegmentState state = SegmentState::Free;
            float currentLevel;
            float initialLevel;
            float targetLevel = initialTargetLevel;
            float curve = initialCurve;
            node phasor = Components::OneShotPhasor;

            event seconds (float s) { phasor.seconds <- s; }
            event targetLevelIn (float t) { targetLevel = t; }
            event curveIn (float c) { curve = c; }

            event latch () 
            {
                initialLevel = currentLevel;
                phasor.trigger <- void;
                // We cheat a little here. The phasor needs a frame to reset itself to zero.
                phasor.advance();
                state = SegmentState::Latched;
            }

            event free () 
            {
                trigState = TrigState::Ready;
                state = SegmentState::Free;
            }
        
            void main () 
            {
                loop 
                {
                    if (state == SegmentState::Free) 
                    {
                        currentLevel = in;
                    } 
                    else if (state == SegmentState::Latched)
                    {
                        if (trigState == TrigState::Ready)
                        {
                            if (phasor.phase == 1.f) 
                            {
                                currentLevel = targetLevel;
                                trigState = TrigState::Triggering;
                            }                        
                            else 
                            {
                                let phaseFactor = (phasor.phase / (curve * phasor.phase + (1.f - curve)));
                                currentLevel = (targetLevel - initialLevel) * phaseFactor + initialLevel;
                            }
                        }
                        else if (trigState == TrigState::Triggering) 
                        {
                            trigger <- void;
                            currentLevel = targetLevel;
                            trigState = TrigState::Triggered;
                        }
                        else if (trigState == TrigState::Triggered)
                        {
                            currentLevel = targetLevel;
                        }
                    }
                    out <- currentLevel;
                    phasor.advance();
                    advance();
                }
            }
        }
    }
}
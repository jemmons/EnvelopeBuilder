namespace EnvelopeBuilder {
  processor EnvelopeSegment() {
    input stream float in;
    input value float seconds;
    input value float targetLevel;
    input event void capture;
    input event void halt;
    output event void trigger;
    output stream float out;

    float currentLevel;
    float startLevel;

    event capture() {
      startLevel = currentLevel;
      phasor.trigger <- void;
    }

    event halt() {
      phasor.halt <- void;
    }


    node phasor = OneShotPhasor;
    

    void main() {
      loop {
        if (phasor.phase < 0.f) {
          currentLevel = in;
        
        } else if (phasor.phase == 1.f) {
          currentLevel = targetLevel;
          trigger <- void;

        } else {
          currentLevel = (targetLevel - startLevel) * phasor.phase + startLevel;
        }
        
        out <- currentLevel;
        phasor.seconds <- seconds;
        phasor.advance();
        advance();
      }
    }

  }
}
namespace EnvelopeBuilder {
  namespace Segments {
    processor ConstantSegment {
      input value float constant;
      input event void halt;
      output event void trigger;
      output stream float out;

      enum State {
        Active, Inactive, Transitioning
      }

      State state = State::Active;

      event halt() {
        trigger <- void;
        if (state == State::Active) {
          state = State::Transitioning;  
        }
      }

      void main() {
        loop {
          if (state == State::Inactive) {
            out <- 0.f;
          } else if (state == State::Active) {
            out <- constant;
          } else if (state == State::Transitioning) {
            out <- constant;
            state = State::Inactive;
          }
          advance();
        }
      }
    }
  }
}
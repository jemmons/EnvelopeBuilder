namespace EnvelopeBuilder {
  namespace Envelopes {
    graph GADSR {
      input event (std::notes::NoteOn, std::notes::NoteOff) noteIn;
      input value float gain [[name: "Gain", min: 0.0, max: 1.0, init:0.0]];
      input value float attack [[name: "Attack", min: 0.0, max: 10.0, init:0.3]];
      input value float decay [[name: "Decay", min: 0.0, max: 10.0, init: 0.3]];
      input value float sustain [[name: "Sustain", min: 0.0, max: 1.0, init: 0.0]];
      input value float release [[name: "Release", min: 0.0, max: 10.0, init: 0.3]];
      output stream float out;

      node { 
        gai = Segments::ConstantSegment;
        att = Segments::EnvelopeSegment;
        dec = Segments::EnvelopeSegment;
        sus = Segments::SustainSegment;
        rel = Segments::EnvelopeSegment;
        clipper = Components::ClipNormal;
      }

      event noteIn(std::notes::NoteOn on) {
        dec.halt <- void;
        sus.halt <- void;
        rel.halt <- void;
        att.capture <- void;
      }

      event noteIn(std::notes::NoteOff off) {
        att.halt <- void;
        dec.halt <- void;
        sus.halt <- void;
      }

      connection {
        0.0f -> gai.constant;
        1.f -> att.targetLevel;
        0.0f -> rel.targetLevel;

        0.5f -> att.curve;
        0.7f -> dec.curve;
        0.7f -> rel.curve;

        attack -> att.seconds;
        decay -> dec.seconds;
        sustain -> dec.targetLevel;
        release -> rel.seconds;
        
        gai.trigger -> att.capture;
        att.trigger -> dec.capture;
        dec.trigger -> sus.capture;
        sus.trigger -> rel.capture;
        
        gai.out -> att.in;
        att.out -> dec.in;
        dec.out -> sus.in;
        sus.out -> rel.in;
        rel.out -> clipper -> out;
      }
    }
  }
}
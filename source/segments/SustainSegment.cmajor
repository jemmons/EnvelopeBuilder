namespace EnvelopeBuilder {
  namespace Segments {
    processor SustainSegment {
      input stream float in;
      input event void capture;
      input event void halt;
      output event void trigger;
      output stream float out;

      enum State {
        Active, Inactive, Transitioning
      }

      State state = State::Inactive;
      float currentLevel;
      float capturedLevel;

      event capture() {
        capturedLevel = currentLevel;
        state = State::Active;
      }

      event halt() {
        trigger <- void;
        if (state == State::Active) {
          state = State::Transitioning;  
        }
      }

      void main() {
        loop {
          if (state == State::Inactive) {
            currentLevel = in;
          } else if (state == State::Active) {
            currentLevel = capturedLevel;
          } else if (state == State::Transitioning) {
            currentLevel = capturedLevel;
            state = State::Inactive;
          }
          out <- currentLevel;
          advance();
        }
      }
    }
  }
}
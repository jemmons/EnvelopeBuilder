namespace EnvelopeBuilder {
  namespace Segments {
    processor SustainSegment {
      input stream float in;
      input event void latch;
      input event void free;
      output event void trigger;
      output stream float out;

      SegmentState state = SegmentState::Free;
      float level;

      event latch() {
        state = SegmentState::Latched;
      }

      event free() {
        trigger <- void;
        state = SegmentState::Freeing;  
      }

      void main() {
        loop {
          if (state == SegmentState::Free) {
            level = in;
          } else if (state == SegmentState::Latched) {
            // just sustain the existing `level`. Donâ€™t update it.
          } else if (state == SegmentState::Freeing) {
            trigger <- void;
            // Take a cycle to move to free. This allows the next segment to latch to the output before starting to pass through values again.
            state = SegmentState::Free;
          } 
          out <- level;
          advance();
        }
      }
    }
  }
}